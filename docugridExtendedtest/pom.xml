<?xml version="1.0" encoding="UTF-8"?>
<!-- JBoss, Home of Professional Open Source Copyright 2015, Red Hat, Inc. 
	and/or its affiliates, and individual contributors by the @authors tag. See 
	the copyright.txt in the distribution for a full listing of individual contributors. 
	Licensed under the Apache License, Version 2.0 (the "License"); you may not 
	use this file except in compliance with the License. You may obtain a copy 
	of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.jboss</groupId>
		<artifactId>jboss-parent</artifactId>
		<version>22.0.0.redhat-1</version>
		<relativePath />
	</parent>
	<groupId>org.jboss.eap.quickstarts</groupId>
	<artifactId>docugridExtendedtest</artifactId>
	<packaging>jar</packaging>
	<name>${qs.name.prefix} spring-resteasy</name>
	<description>This project demonstrates Spring with a JAX-RS RestEasy client</description>





	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<properties>
		<qs.name.prefix>JBoss EAP Quickstart:</qs.name.prefix>
		<root.dir>${project.basedir}</root.dir>
		<jboss.home.name>EAP7_HOME</jboss.home.name>
		<product.name>JBoss EAP</product.name>
		<!-- A base list of dependency and plug-in version used in the various 
			quick starts. -->
		<version.wildfly.maven.plugin>1.2.0.Alpha4</version.wildfly.maven.plugin>

		<!-- other plug-in versions -->
		<version.com.mycyla.license>3.0</version.com.mycyla.license>

		<!-- Explicitly declaring the source encoding eliminates the following 
			message: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<version.spring.framework>4.3.6.RELEASE</version.spring.framework>
		<!-- EAP component version management BOM -->
		<version.server.bom>7.1.0.Alpha1</version.server.bom>

		<version.jboss.spec.javaee.7.0>1.1.0.Final-redhat-1</version.jboss.spec.javaee.7.0>

		<!-- maven-compiler-plugin -->
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.source>1.8</maven.compiler.source>

		<version.jaxws-tools-maven-plugin>1.2.0.Final</version.jaxws-tools-maven-plugin>

		<!-- Other dependency versions -->
		<version.ro.isdc.wro4j>1.7.9</version.ro.isdc.wro4j>
		<httpclient.version>4.5.2.redhat-1</httpclient.version>
		<version.org.apache.commons.commons-lang3>3.5</version.org.apache.commons.commons-lang3>
		<version.h2db>1.4.193.redhat-2</version.h2db>
		<version.org.wildfly.checkstyle-config>1.0.5.Final</version.org.wildfly.checkstyle-config>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Add H2 dependency for embedded testing database -->
			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
				<version>${version.h2db}</version>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>2.5.0.redhat-2</version>
				<scope>compile</scope>
			</dependency>

			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>1.2</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.12</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${version.org.apache.commons.commons-lang3}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${httpclient.version}</version>

			</dependency>

			<!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpmime -->
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpmime</artifactId>
				<version>4.5.3</version>
			</dependency>

			<!-- JBoss distributes a complete set of Java EE APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-eap-javaee7-with-tools stack (you can 
				read this as the JBoss stack of the Java EE APIs, with some extras tools 
				for your project, such as Arquillian for testing) -->
			<dependency>
				<groupId>org.jboss.bom</groupId>
				<artifactId>jboss-eap-javaee7-with-tools</artifactId>
				<version>${version.server.bom}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<!-- Define the version of the JBoss Java EE APIs we want to use -->
			<!-- JBoss distributes a complete set of Java EE APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-7.0 stack (you can read this as 
				the JBoss stack of the Java EE APIs). You can actually use this stack with 
				any version of JBoss EAP that implements Java EE. -->
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-7.0</artifactId>
				<version>${version.jboss.spec.javaee.7.0}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-framework-bom</artifactId>
				<version>${version.spring.framework}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-spring</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Bring in the Servlet jars to avoid errors while compiling with jdt. -->
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.servlet.jsp</groupId>
			<artifactId>jboss-jsp-api_2.3_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_2.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
		</dependency>
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>docugridExtendedlib</groupId>
			<artifactId>docugridExtendedlib</artifactId>
			<version>1.3</version>
		</dependency>

	</dependencies>




	<!-- Activate the JBoss Enterprise Maven Repository. NOTE: Configuring the 
		Maven repository in the pom.xml file is not a recommended procedure and is 
		only done here to make it easier to use the quickstarts. For more information 
		about how to configure Maven for your application, see the section entitled 
		'Use the Maven Repository' in the Development Guide for Red Hat JBoss Enterprise 
		Application Platform located here: https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/ -->
	<repositories>
		<repository>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>jboss-enterprise-maven-repository</id>
			<url>https://maven.repository.redhat.com/ga/</url>
		</repository>
		<repository>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>jboss-enterprise-maven-repository-ea</id>
			<url>https://maven.repository.redhat.com/earlyaccess/all/</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>jboss-enterprise-maven-repository</id>
			<url>https://maven.repository.redhat.com/ga/</url>
		</pluginRepository>
		<pluginRepository>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<id>jboss-enterprise-maven-repository-ea</id>
			<url>https://maven.repository.redhat.com/earlyaccess/all/</url>
		</pluginRepository>
	</pluginRepositories>
	<build>
		<!-- Set the name of the WAR, used as the context root when the app is 
			deployed. -->
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<groupId>com.mycila</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>${version.com.mycyla.license}</version>
				<configuration>
					<header>${basedir}/dist/license.txt</header>
					<aggregate>true</aggregate>
					<strictCheck>true</strictCheck>
					<excludes>
						<exclude>target/**</exclude>
						<exclude>.clover/**</exclude>
						<exclude>**/*.sql</exclude>
						<exclude>**/LICENSE*</exclude>
						<exclude>**/license*</exclude>
						<!-- Exclude specific Quickstarts -->
						<exclude>petclinic-spring/**</exclude>
						<!-- Javascrip Libraries -->
						<exclude>**/jquery*</exclude>
						<exclude>**/angular*</exclude>
						<exclude>**/qunit*</exclude>
						<exclude>**/backbone*</exclude>
						<exclude>**/lodash*</exclude>
						<exclude>**/modernizr*</exclude>
						<exclude>**/yepnope*</exclude>
						<exclude>**/mobile-nav*</exclude>
						<!--Other libraries -->
						<exclude>**/*glyphicons*/**</exclude>
						<exclude>**/*cordova*/**</exclude>
					</excludes>
					<encoding>UTF-8</encoding>
					<headerDefinitions>
						<headerDefinition>dist/headerdefinition.xml</headerDefinition>
					</headerDefinitions>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.wildfly.plugins</groupId>
					<artifactId>wildfly-maven-plugin</artifactId>
					<version>${version.wildfly.maven.plugin}</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-ejb-plugin</artifactId>
					<version>${version.ejb.plugin}</version>
					<configuration>
						<!-- Tell Maven we are using EJB -->
						<ejbVersion>3.2</ejbVersion>
					</configuration>
				</plugin>
				<!-- Checkstyle -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${version.checkstyle.plugin}</version>
					<configuration>
						<configLocation>wildfly-checkstyle/checkstyle.xml</configLocation>
						<consoleOutput>true</consoleOutput>
						<failsOnError>true</failsOnError>
						<includeTestSourceDirectory>true</includeTestSourceDirectory>
						<excludes>**/*$logger.java,**/*$bundle.java</excludes>
						<useFile />
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.wildfly.checkstyle</groupId>
							<artifactId>wildfly-checkstyle-config</artifactId>
							<version>${version.org.wildfly.checkstyle-config}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>check-style</id>
							<phase>compile</phase>
							<goals>
								<goal>checkstyle</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											com.redhat.rcm.maven.plugin
										</groupId>
										<artifactId>
											buildmetadata-maven-plugin
										</artifactId>
										<versionRange>
											[1.7.0,)
										</versionRange>
										<goals>
											<goal>
												provide-buildmetadata
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.commonjava.maven.plugins
										</groupId>
										<artifactId>
											project-sources-maven-plugin
										</artifactId>
										<versionRange>
											[0.3,)
										</versionRange>
										<goals>
											<goal>archive</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.jboss.ws.plugins
										</groupId>
										<artifactId>
											jaxws-tools-maven-plugin
										</artifactId>
										<versionRange>
											[1.2.0.Final,)
										</versionRange>
										<goals>
											<goal>wsconsume</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>


	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss EAP instance. This profile will start a new JBoss EAP instance, and 
				execute the test, shutting it down when done. Run with: mvn clean verify 
				-Parq-managed -->
			<id>arq-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.failsafe.plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss EAP instance. Run with: mvn clean verify -Parq-remote -->
			<id>arq-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.wildfly.arquillian</groupId>
					<artifactId>wildfly-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${version.failsafe.plugin}</version>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>root-dir</id>
			<activation>
				<file>
					<exists>${basedir}/../docs.properties</exists>
				</file>
			</activation>
			<properties>
				<root.dir>${basedir}/../</root.dir>
			</properties>
		</profile>
		<profile>
			<id>root-dir2</id>
			<activation>
				<file>
					<exists>${basedir}/../../docs.properties</exists>
				</file>
			</activation>
			<properties>
				<root.dir>${basedir}/../../</root.dir>
			</properties>
		</profile>
		<profile>
			<id>root-dir3</id>
			<activation>
				<file>
					<exists>${basedir}/../../../docs.properties</exists>
				</file>
			</activation>
			<properties>
				<root.dir>${basedir}/../../../</root.dir>
			</properties>
		</profile>
		<profile>
			<id>docs</id>
			<activation>
				<property>
					<name>docs</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<version>${version.resources.plugin}</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<!-- here the phase you need -->
								<phase>generate-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<outputDirectory>${project.build.directory}/docs</outputDirectory>
									<filters>
										<filter>${root.dir}/docs.properties</filter>
									</filters>
									<resources>
										<resource>
											<directory>${basedir}</directory>
											<includes>
												<include>*.md</include>
											</includes>
											<filtering>true</filtering>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.vladsch.flexmark</groupId>
						<artifactId>markdown-page-generator-plugin</artifactId>
						<version>0.15.4</version>
						<executions>
							<execution>
								<phase>process-resources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<inputDirectory>${project.build.directory}/docs</inputDirectory>
							<outputDirectory>${project.basedir}</outputDirectory>
							<defaultTitle>${project.name}</defaultTitle>
							<inputEncoding>UTF-8</inputEncoding>
							<headerHtmlFile>${root.dir}/dist/header.html</headerHtmlFile>
							<footerHtmlFile>${root.dir}/dist/footer.html</footerHtmlFile>
							<pegdownExtensions>TABLES,TOC,AUTOLINKS,STRIKETHROUGH,ATXHEADERSPACE,FENCED_CODE_BLOCKS,HARDWRAPS,ANCHORLINKS,RELAXEDHRULES</pegdownExtensions>
							<!--<copyDirectories>css,js</copyDirectories> -->
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
